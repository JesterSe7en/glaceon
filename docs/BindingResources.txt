1.Resource Description:
You start by defining a resource structure in your game engine, such as a Uniform Buffer Object (UBO) struct, that contains the data you want to pass to shaders.

2. VkBuffer Creation:
Next, you create a VkBuffer object in Vulkan, specifying its size, usage flags (e.g., uniform buffer), and memory properties.
3. VkBufferMemory Allocation:
You then allocate memory for the VkBuffer using vkAllocateMemory, specifying the memory type and other allocation parameters.
After allocating memory, you bind this memory to the VkBuffer using vkBindBufferMemory.

4. Data Copying:
Now, you can copy data from your game engine's resource struct (e.g., UBO struct) into the memory that is bound to the VkBuffer. This step ensures that the data is accessible to the GPU.

5. Descriptor Set and Descriptor Buffer Info:
To let shaders access the buffer data, you create a descriptor set layout that describes the type and bindings of descriptors, including buffer descriptors.
You then allocate a VkDescriptorSet from a descriptor pool and update it using vkUpdateDescriptorSets. In this update, you use VkDescriptorBufferInfo to specify the buffer resource (the VkBuffer) and its properties (offset, range).

6. Binding Descriptor Set:
Finally, you bind the descriptor set to the pipeline during rendering or compute operations. This binding allows shaders to access the buffer data through the descriptor set.


VkBuffer and VkBufferMemory handle the creation, allocation, and binding of buffer resources in Vulkan.
Descriptor sets, along with VkDescriptorBufferInfo and VkWriteDescriptorSet, describe and associate buffer resources with shaders, enabling them to access the buffer data during rendering or compute operations.